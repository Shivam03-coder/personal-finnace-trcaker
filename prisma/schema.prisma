generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    clerkUserId String        @unique
    name        String
    email       String        @unique
    profileUrl  String
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    Account     Account[]
    Budget      Budget[]
    Transaction Transaction[]

    @@index([name])
    @@map("users")
}

model Account {
    id               String        @id @default(auto()) @map("_id") @db.ObjectId
    accountName      String
    accountType      AccountType
    accountBalance   Float         @default(0.00)
    isDefaultAccount Boolean       @default(false)
    currency         String        @default("INR")
    status           AccountStatus @default(ACTIVE)
    Transaction      Transaction[]

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([accountName, accountType])
    @@map("accounts")
}

model Transaction {
    id                         String            @id @default(auto()) @map("_id") @db.ObjectId
    amount                     Float             @default(0.00)
    currency                   CurrencyType      @default(INR)
    type                       TransactionType
    description                String?
    date                       DateTime          @default(now())
    status                     TransactionStatus @default(PENDING)
    isRecurring                Boolean           @default(false)
    recurringInterval          RecurringInterval @default(ONE_TIME)
    lastTimeRecurringProcessed DateTime?
    nextRecurringDate          DateTime?
    tags                       String[]          @default([])

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    accountId String  @db.ObjectId
    account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([accountId])
    @@map("transactions")
}

model Budget {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    amount    Float    @default(0.00)
    period    String   @default("MONTHLY")
    startDate DateTime
    endDate   DateTime
    userId    String   @unique @db.ObjectId
    user      User?    @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("budgets")
}

enum TransactionType {
    DEPOSIT
    WITHDRAWAL
    TRANSFER
    PAYMENT
    REFUND
}

enum TransactionStatus {
    PENDING
    COMPLETED
    FAILED
    CANCELLED
}

enum AccountStatus {
    ACTIVE
    INACTIVE
    CLOSED
    SUSPENDED
    PENDING
}

enum AccountType {
    SAVINGS
    CHECKING
    BUSINESS
    INVESTMENT
    RETIREMENT
    CREDIT
    LOAN
}

enum RecurringInterval {
    DAILY
    WEEKLY
    BIWEEKLY
    MONTHLY
    QUARTERLY
    YEARLY
    ONE_TIME
}

enum CurrencyType {
    EUR
    INR
    USD
    JPY
    GBP
}
